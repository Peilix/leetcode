#include <gtest/gtest.h>

#include "design.h"
#include "solution.h"
#include "helper.h"

Solution solution;

TEST(Leetcode, 509_Fibonacci_Number)
{
	EXPECT_EQ(1, solution.fib(2));
	EXPECT_EQ(2, solution.fib(3));
	EXPECT_EQ(3, solution.fib(4));
}

TEST(Leetcode, 1137_N_th_Tribonacci_Number)
{
	EXPECT_EQ(4, solution.tribonacci(4));
	EXPECT_EQ(1389537, solution.tribonacci(25));
}

TEST(Leetcode, 70_Climbing_Stairs)
{
	EXPECT_EQ(2, solution.climbStairs(2));
	EXPECT_EQ(3, solution.climbStairs(3));
}

TEST(Leetcode, 746_Min_Cost_Climbing_Stairs)
{
	std::vector<int> cost = { 10, 15, 20 };
	EXPECT_EQ(15, solution.minCostClimbingStairs(cost));
	cost = { 1, 100, 1, 1, 1, 100, 1, 1, 100, 1 };
	EXPECT_EQ(6, solution.minCostClimbingStairs(cost));
}

TEST(Leetcode,
     1239_Maximum_Length_of_a_Concatenated_String_with_Unique_Characters)
{
	std::vector<std::string> arr{ "un", "iq", "ue" };
	EXPECT_EQ(4, solution.maxLength(arr));
	arr = { "cha", "r", "act", "ers" };
	EXPECT_EQ(6, solution.maxLength(arr));
	arr = { "abcdefghijklmnopqrstuvwxyz" };
	EXPECT_EQ(26, solution.maxLength(arr));
	arr = { "trfyicvo",
		"fsxpgazvqo",
		"vdtirbunhyoxjpgfqkswz",
		"oetd",
		"rdbnjam",
		"hbraquly",
		"nxmquoczjdwkygft",
		"fjmtxdsyibhepgwqazu",
		"jcsizhewqbyuafrgkn",
		"mpfdrnjustlbo",
		"prsneyugx",
		"bolnritgsfucavd",
		"zvlhptiknjfsbqwer",
		"kaoxyfnpuj",
		"ehxdsfintp",
		"wrapmoxvdfunsjgq" };
	EXPECT_EQ(21, solution.maxLength(arr));
	arr = { "wdncxmbrlajpfekizoh",
		"rfh",
		"xtyj",
		"pikxflowetycqav",
		"rowtxjp",
		"grwvphkmz",
		"nmrlshjvwpqxiotdug",
		"softrkhzeyqbxcmdanu",
		"lvbcjqezkuiynxfar",
		"doeunkxg",
		"xjpaouyqtkfclhi",
		"ckwazlqijurtdsxng",
		"oglz",
		"szkvftmwpiyqrjxcebgud",
		"xavjuozpb",
		"ecjtozksbuadqgwy" };
	EXPECT_EQ(21, solution.maxLength(arr));
}

TEST(Leetcode, 198_House_Robber)
{
	std::vector<int> nums = { 1, 2, 3, 1 };
	EXPECT_EQ(4, solution.rob(nums));
	nums = { 2, 7, 9, 3, 1 };
	EXPECT_EQ(12, solution.rob(nums));
}

TEST(Leetcode, 740_Delete_and_Earn)
{
	std::vector<int> nums = { 3, 4, 2 };
	EXPECT_EQ(6, solution.deleteAndEarn(nums));
	nums = { 2, 2, 3, 3, 3, 4 };
	EXPECT_EQ(9, solution.deleteAndEarn(nums));
}

TEST(Leetcode, 1328_Break_a_Palindrome)
{
	std::string palindrome = "abccba";
	EXPECT_EQ("aaccba", solution.breakPalindrome(palindrome));
	palindrome = "a";
	EXPECT_EQ("", solution.breakPalindrome(palindrome));
	palindrome = "aa";
	EXPECT_EQ("ab", solution.breakPalindrome(palindrome));
	palindrome = "aba";
	EXPECT_EQ("abb", solution.breakPalindrome(palindrome));
}

TEST(Leetcode, 55_Jump_Game)
{
	std::vector<int> nums = { 2, 3, 1, 1, 4 };
	EXPECT_TRUE(solution.canJump(nums));
	nums = { 3, 2, 1, 0, 4 };
	EXPECT_FALSE(solution.canJump(nums));
}

TEST(Leetcode, 45_Jump_Game_II)
{
	std::vector<int> nums = { 2, 3, 1, 1, 4 };
	EXPECT_EQ(2, solution.jump(nums));
	nums = { 2, 3, 0, 1, 4 };
	EXPECT_EQ(2, solution.jump(nums));
}

TEST(Leetcode, 1293_Shortest_Path_in_a_Grid_with_Obstacles_Elimination)
{
	std::vector<std::vector<int> > grid{
		{ 0, 0, 0 }, { 1, 1, 0 }, { 0, 0, 0 }, { 0, 1, 1 }, { 0, 0, 0 }
	};
	int k = 1;
	EXPECT_EQ(6, solution.shortestPath(grid, k));

	grid = std::vector<std::vector<int> >(
		{ { 0, 1, 1 }, { 1, 1, 1 }, { 1, 0, 0 } });
	k = 1;
	EXPECT_EQ(-1, solution.shortestPath(grid, k));

	grid = std::vector<std::vector<int> >(
		{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
		  { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
		  { 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 },
		  { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
		  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
		  { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
		  { 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 },
		  { 0, 1, 0, 1, 1, 1, 1, 0, 0, 0 },
		  { 0, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
		  { 0, 1, 1, 1, 1, 1, 1, 0, 1, 0 },
		  { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } });
	k = 1;
	EXPECT_EQ(20, solution.shortestPath(grid, k));

	grid =
		std::vector<std::vector<int> >(
			{ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
			  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } });
	k = 5;
	EXPECT_EQ(387, solution.shortestPath(grid, k));
}

TEST(Leetcode, 53_Maximum_Subarray)
{
	std::vector<int> nums{ -2, 1, -3, 4, -1, 2, 1, -5, 4 };
	EXPECT_EQ(6, solution.maxSubArray(nums));
	nums = { 1 };
	EXPECT_EQ(1, solution.maxSubArray(nums));
	nums = { 5, 4, -1, 7, 8 };
	EXPECT_EQ(23, solution.maxSubArray(nums));
}

TEST(Leetcode, 918_Maximum_Sum_Circular_Subarray)
{
	std::vector<int> nums{ 1, -2, 3, -2 };
	EXPECT_EQ(3, solution.maxSubarraySumCircular(nums));
	nums = { 5, -3, 5 };
	EXPECT_EQ(10, solution.maxSubarraySumCircular(nums));
	nums = { 3, -1, 2, -1 };
	EXPECT_EQ(4, solution.maxSubarraySumCircular(nums));
	nums = { 3, -2, 2, -3 };
	EXPECT_EQ(3, solution.maxSubarraySumCircular(nums));
	nums = { -2, -3, -1 };
	EXPECT_EQ(-1, solution.maxSubarraySumCircular(nums));
	nums = { -10, -7, 9, -7, 6, 9, -9, -4, -8, -5 };
	EXPECT_EQ(-1, solution.maxSubarraySumCircular(nums));
}

TEST(Leetcode, 152_Maximum_Product_Subarray)
{
	std::vector<int> nums{ 2, 3, -2, 4 };
	EXPECT_EQ(6, solution.maxProduct(nums));
	nums = { -2, 0, -1 };
	EXPECT_EQ(0, solution.maxProduct(nums));
}

TEST(Leetcode, 1567_Maximum_Length_of_Subarray_With_Positive_Product)
{
	std::vector<int> nums{ 1, -2, -3, 4 };
	EXPECT_EQ(4, solution.getMaxLen(nums));
	nums = { 0, 1, -2, -3, -4 };
	EXPECT_EQ(3, solution.getMaxLen(nums));
	nums = { -1, -2, -3, 0, 1 };
	EXPECT_EQ(2, solution.getMaxLen(nums));
	nums = { -1, 2 };
	EXPECT_EQ(1, solution.getMaxLen(nums));
	nums = { 1, 2, 3, 5, -6, 4, 0, 10 };
	EXPECT_EQ(4, solution.getMaxLen(nums));
}

TEST(Leetcode, 929_Unique_Email_Addresses)
{
	std::vector<std::string> emails{ "test.email+alex@leetcode.com",
					 "test.e.mail+bob.cathy@leetcode.com",
					 "testemail+david@lee.tcode.com" };
	EXPECT_EQ(2, solution.numUniqueEmails(emails));
	emails = { "a@leetcode.com", "b@leetcode.com", "c@leetcode.com" };
	EXPECT_EQ(3, solution.numUniqueEmails(emails));
}

TEST(Leetcode, 922_Sort_Array_By_Parity_II)
{
	std::vector<int> nums{ 4, 2, 5, 7 };
	std::set<std::vector<int> > results{
		{ 4, 5, 2, 7 }, { 4, 7, 2, 5 }, { 2, 5, 4, 7 }, { 2, 7, 4, 5 }
	};
	EXPECT_TRUE(results.contains(solution.sortArrayByParityII(nums)));
	nums = { 2, 3 };
	results = { nums };
	EXPECT_TRUE(results.contains(solution.sortArrayByParityII(nums)));
}

TEST(Leetcode, 279_Perfect_Squares)
{
	EXPECT_EQ(3, solution.numSquares(12));
	EXPECT_EQ(2, solution.numSquares(13));
}

TEST(Leetcode, 698_Partition_to_K_Equal_Sum_Subsets)
{
	std::vector<int> nums{ 4, 3, 2, 3, 5, 2, 1 };
	EXPECT_TRUE(solution.canPartitionKSubsets(nums, 5));
	nums = { 1, 2, 3, 4 };
	EXPECT_FALSE(solution.canPartitionKSubsets(nums, 3));
}

TEST(Leetcode, 1143_Longest_Common_Subsequence)
{
	std::string text1 = "abcde", text2 = "ace";
	EXPECT_EQ(3, solution.longestCommonSubsequence(text1, text2));
	text1 = "abc", text2 = "abc";
	EXPECT_EQ(3, solution.longestCommonSubsequence(text1, text2));
	text1 = "abc", text2 = "def";
	EXPECT_EQ(0, solution.longestCommonSubsequence(text1, text2));
}

TEST(Leetcode, 79_Word_Search)
{
	std::vector<std::vector<char> > board{ { 'A', 'B', 'C', 'E' },
					       { 'S', 'F', 'C', 'S' },
					       { 'A', 'D', 'E', 'E' } };
	std::string word{ "ABCCED" };
	EXPECT_TRUE(solution.exist(board, word));
	board = { { 'A', 'B', 'C', 'E' },
		  { 'S', 'F', 'C', 'S' },
		  { 'A', 'D', 'E', 'E' } };
	word = "SEE";
	EXPECT_TRUE(solution.exist(board, word));
	board = { { 'A', 'B', 'C', 'E' },
		  { 'S', 'F', 'C', 'S' },
		  { 'A', 'D', 'E', 'E' } };
	word = "ABCB";
	EXPECT_FALSE(solution.exist(board, word));
	board = { { 'A', 'B', 'C', 'E' },
		  { 'S', 'F', 'E', 'S' },
		  { 'A', 'D', 'E', 'E' } };
	word = "ABCESEEEFS";
	EXPECT_TRUE(solution.exist(board, word));
	board = { { 'a' }, { 'a' } };
	word = "aaa";
	EXPECT_FALSE(solution.exist(board, word));
}

TEST(Leetcode, 212_Word_Search_II)
{
	std::vector<std::vector<char> > board{ { 'o', 'a', 'a', 'n' },
					       { 'e', 't', 'a', 'e' },
					       { 'i', 'h', 'k', 'r' },
					       { 'i', 'f', 'l', 'v' } };
	std::vector<std::string> words{ "oath", "pea", "eat", "rain" };
	EXPECT_EQ(std::vector<std::string>({ "eat", "oath" }),
		  solution.findWords(board, words));

	board = { { 'a', 'b' }, { 'c', 'd' } };
	words = { "abcb" };
	EXPECT_EQ(std::vector<std::string>(), solution.findWords(board, words));
}

TEST(Leetcode, 480_Sliding_Window_Median)
{
	std::vector<int> nums{ 1, 3, -1, -3, 5, 3, 6, 7 };
	int k = 3;
	EXPECT_EQ(std::vector<double>({ 1.00000, -1.00000, -1.00000, 3.00000,
					5.00000, 6.00000 }),
		  solution.medianSlidingWindow(nums, k));

	nums = { 1, 2, 3, 4, 2, 3, 1, 4, 2 };
	k = 3;
	EXPECT_EQ(std::vector<double>({ 2.00000, 3.00000, 3.00000, 3.00000,
					2.00000, 3.00000, 2.00000 }),
		  solution.medianSlidingWindow(nums, k));

	nums = { 1, 4, 2, 3 };
	k = 4;
	EXPECT_EQ(std::vector<double>({ 2.50000f }),
		  solution.medianSlidingWindow(nums, k));

	nums = { 125998401, 236249665, 98339999,  823912159, 517100457,
		 41061390,  776531043, 899116882, 762495482, 19622903,
		 675606239, 168017184, 716794261, 925368604, 386534432,
		 139145027, 793755784, 485046524, 329004856, 961707414,
		 100074707, 475904948, 305359608, 485993904, 219234987,
		 393466835, 894946732, 394261136, 359861757, 675578525,
		 495206564, 83083954,  527644328, 158242233, 785433623,
		 993902230, 386973244, 71807370,  566615132, 951011304,
		 719180285, 225084679, 72476164,  69617655,  271297126,
		 375992679, 57561410,  66976720,  189280590, 608573501,
		 623199224, 831611349, 68367967,  949648802, 648950710,
		 992623504, 15756763,  683427160, 617733964, 111761928,
		 920489927, 202010101, 12121600,  864268382, 972286544,
		 16874985,  943010069, 740914823, 445244855, 42746768,
		 185391678, 672138927, 874962869, 680408274, 64419421,
		 158429237, 633442557, 192617320, 854419789, 803224812,
		 717210242, 326826683, 860375802, 121687541, 236543152,
		 588525067, 31122987,  245516288, 869145107, 331025033,
		 200578832, 726587281, 953393503, 102093232, 627473427,
		 446675750, 823983985, 369774970, 137730019, 427015023,
		 744121865, 658908574, 496214217, 193343818, 179769793,
		 674398200, 191858534, 193426791, 426813357, 856710119,
		 996600545, 285891793, 62446612,  213683079, 778850969,
		 235407518, 622255830, 801352498, 461483549, 236053657,
		 951517190, 986176768, 187130808, 984409426, 548184872,
		 431276652, 502360117, 53764993,  685105611, 555667441,
		 843783731, 284140707, 696715268, 258160763, 990976801,
		 611411922, 83900737,  15909258,  98926978,  306355046,
		 36451194,  602378163, 931873583, 401071910, 11907084,
		 992338773, 672733787, 928335232, 61548769,  156021307,
		 172573762, 344294484, 29426148,  82504135,  520044630,
		 924631698, 93278594,  863245626, 169717050, 576176134,
		 788519815, 530945068, 799204591, 868832599, 373670371,
		 35741569,  206107601, 159327396, 50920410,  559312873,
		 835533592, 417513011, 312101128, 121570900, 423641512,
		 234602379, 975186539, 364967069, 788232851, 2908414,
		 637073864, 739946884, 209479611, 998124644, 486124991,
		 67909127,  473354441, 388661399, 379857397, 941872495,
		 742040006, 821821291, 528598911, 22049538,  219397882,
		 983759453, 568528318, 100695123, 958797003, 931425980,
		 113637808, 797676873, 962279937, 132534180, 354399899,
		 72444293,  95488249,  139190143, 759041818, 162971946,
		 820825075, 965065775, 63978281,  979618776, 843130330,
		 39848335,  863552128, 819107448, 14196197,  224798162,
		 758973661, 17457247,  346174337, 411860814, 597885195,
		 373466630, 551928807, 285587856, 42123325,  90098343,
		 306879666, 618310015, 56032850,  939251142, 634633075,
		 874300523, 78755865,  238370012, 227790029, 296653380,
		 543812973, 967214157, 664612556, 873759223, 571061353,
		 516720006, 882250952, 764651376, 746511362, 809973938,
		 126116211, 861777266, 260794294, 948554309, 581159682,
		 588127396, 582896009, 60309296,  592013644, 474556735,
		 913758765, 888003658, 813617003, 78083903,  243649404,
		 911701846, 470082955, 884865950, 617766175, 860153627,
		 535075963, 507680152, 420763711, 905019784, 40837987,
		 316764116, 35515277,  697785251, 268517290, 106950683,
		 869295220, 913511999, 35574790,  698020242, 716022311,
		 836106836, 107585262, 4267660,	  859601269, 196034714,
		 308502278, 765241066, 920012957, 775509899, 916618850,
		 712812019, 213315298, 40006643,  22245968,  18808176,
		 221896501, 28376046,  174835488, 702417720, 817012481,
		 518329249, 366015711, 25868347,  416084844, 931218476,
		 128106796, 312306078, 271198256, 861768236, 902005662,
		 715075639, 750754639, 112286479, 708210487, 184778266,
		 306963100, 873101606, 462932091, 166400356, 667074898,
		 663173346, 307276870, 497161633, 84179001,  190703590,
		 902614384, 208448058, 633661127, 364134594, 474705986,
		 481758097, 894987089, 72541235,  222803727, 598242968,
		 944106500, 988761464, 678443540, 255389788, 663840210,
		 777841883, 101063223, 57507831,  752431623, 380069156,
		 205938714, 261305812, 162724169, 158425752, 574870162,
		 313884881, 243357935, 100928235, 374721671, 170566424,
		 966703070, 310202866, 636757593, 866831128, 94685626,
		 888912333, 53332199,  292061303, 674186126, 715476688,
		 48734241,  323592489, 190368419, 564362681, 955794415,
		 652031923, 884457798, 200406452, 976880268, 914182961,
		 575014889, 391806501, 699979183, 427688993, 334117420,
		 634719613, 181261042, 115500026, 469677250, 508632956,
		 609176432, 19242306,  282889892, 794598964, 771470902,
		 398167906, 448952090, 427724719, 934564302, 319808134,
		 656718275, 545585992, 701573432, 659449594, 999202769,
		 278819043, 302337947, 447566427, 761206795, 835496964,
		 594884793, 692339166, 870942094, 468214484, 693728558,
		 600133321, 503014666, 671856870, 222376742, 657335592,
		 976393154, 110171129, 101218545, 958994547, 749559272,
		 496589780, 855958796, 899511697, 955700246, 69333540,
		 352670106, 64584400,  783747643, 574923781, 215059414,
		 81571775,  675234217, 3389302,	  129423892, 619397011,
		 352326868, 738234275, 135926137, 735467798, 884387432,
		 165248737, 432145766, 77173586,  769315692, 37280504,
		 94162960,  694399459, 345569615, 985716395, 39576385,
		 26329281,  927573063, 136676268, 103512564, 273909078,
		 532418425, 585090504, 288481115, 631508526, 692591586,
		 818397740, 971035723, 469162908, 454021550, 730793059,
		 979965420, 226725097, 725694079, 973733018, 350938317,
		 230199157, 132162030, 187620721, 835464051, 396221071,
		 733729528, 941076022, 447641599, 877138952, 746613256,
		 375022749, 935817076, 107365704, 609123648, 486606687,
		 780860633, 652092014, 101428657, 402401059, 728594210,
		 531132276, 798125800, 710440016, 149250170, 979686072,
		 826690555, 116445442, 179414786, 357267914, 237553586,
		 391020129, 575348283, 907213587, 197841587, 611845731,
		 932477659, 609337585, 934762199, 350895719, 514254571,
		 602379269, 743440703, 741015653, 785389596, 253940441,
		 926985298, 995528148, 589468237, 643574226, 469865021,
		 724037928, 263111994, 247432563, 863724327, 418288747,
		 464994198, 257472931, 960981190, 133834890, 386091330,
		 488885723, 222891617, 720905129, 942745307, 586027183,
		 998859539, 952603374, 914318433, 704409146, 720149489,
		 334627131, 966002871, 426860155, 288739036, 671419479,
		 313597146, 702363084, 46228876,  165595874, 824026384,
		 289396385, 982065887, 815030545, 567669249, 340202900,
		 188671986, 117184308, 860117413, 73910912,  413623527,
		 366052950, 858765642, 829532185, 483596971, 736171349,
		 971550854, 182529968, 174524260, 559554596, 603204759,
		 939570673, 710023298, 587921685, 627499948, 99435619,
		 472171167, 828728104, 1793133,	  658372429, 75159790,
		 490206094, 146551966, 728128031, 285996411, 466256269,
		 994263758, 20723399,  198794757, 451904745, 660873423,
		 307176655, 960331775, 956535220, 217839676, 564794975,
		 631425085, 644703768, 126724592, 703923567, 148957824,
		 361194144, 801191786, 700859190, 185581113, 708489325,
		 576241238, 882722743, 897086703, 646510312, 779043611,
		 971152896, 291005872, 908405063, 895625896, 864530827,
		 88232365,  950620703, 596800219, 672649243, 654887871,
		 639735600, 378587249, 69331529,  757344738, 557435797,
		 499771965, 651850916, 137240443, 788645779, 293516947,
		 162369648, 287937177, 79477148,  830576580, 856874560,
		 465393138, 727027992, 124993761, 117091517, 300579076,
		 950992588, 759125542, 215616145, 848615104, 28131779,
		 950364469, 585242675, 698535465, 139945753, 12150715,
		 206120540, 376793169, 981000027, 80990701,  853563156,
		 438179510, 554577585, 499421693, 59796706,  128374593,
		 956676472, 651399815, 205058299, 851061505, 195120446,
		 181806953, 907713037, 2163149,	  641801822, 100347120,
		 197856454, 68736822,  706543846, 445335459, 565528196,
		 862747128, 381395752, 27201216,  342777657, 158434876,
		 82722299,  330233193, 131530903, 672192536, 421464263,
		 148800435, 10924515,  510687119, 773755621, 142734493,
		 199390152, 75795344,  227522515, 95512876,  114622623,
		 962571980, 952955009, 381796937, 179982923, 316011885,
		 277670742, 123174441, 811572757, 434684802, 801078698,
		 154694243, 136424162, 515839385, 114039334, 896651992,
		 930257123, 943494679, 88799083,  738031894, 236497386,
		 966819552, 120432193, 174272277, 619443609, 135499454,
		 445131067, 632300568, 119539598, 643287150, 294451052,
		 829486854, 514697432, 455609508, 649799401, 17166190,
		 187820141, 39632344,  966832194, 332906287, 961065174,
		 397870331, 535554937, 967861582, 808466296, 556980881,
		 89428272,  575393182, 514347433, 15627256,  447265236,
		 787035530, 147349415, 38930070,  901131311, 259265333,
		 21110546,  263123445, 439889520, 229944597, 355760826,
		 470707912, 651100014, 608753833, 506555501, 846107177,
		 679591983, 584423535, 609129945, 592440366, 411043870,
		 752409269, 358870547, 48697584,  269024781, 46417332,
		 392513641, 699979281, 636357501, 791957247, 321806223,
		 233366815, 683898861, 748656661, 358792232, 879941026,
		 596430740, 550761562, 995053964, 416813759, 90169577,
		 149604435, 845872055, 22863823,  665678926, 823392059,
		 158692923, 770245865, 490828939, 877289646, 131843667,
		 279344721, 340452083, 874701951, 235621673, 133613043,
		 514002586, 307729599, 870748417, 715073861, 720871793,
		 382467155, 706918614, 301610294, 895782916, 208598673,
		 224585207, 120301201, 120173380, 912348058, 593549804,
		 522994091, 104098844, 183077381, 784959963, 623033198,
		 981674592, 35491490,  90975720,  813547954, 272082429,
		 896699740, 939779181, 919449960, 50637555,  100336182,
		 575547979, 968536965, 274726495, 238360415, 66493250,
		 653534888, 374986789, 685942425, 735098457, 119324186,
		 524846382, 377804045, 436418714, 232671693, 738401642,
		 8401081,   610531312, 315873996, 107653966, 951954366,
		 536837790, 846914061, 355989489, 18879659,  275827635,
		 565351219, 35778336,  31071992,  388443323, 216642781,
		 130438602, 493758805, 727423627, 184496618, 15756105,
		 110841663, 47508092,  397564138, 38841549,  767863933,
		 259887108, 733864736, 66033231,  364446496, 628897028,
		 105322709, 70718544,  8112217,	  843539936, 481645436,
		 148977309, 688678539, 830831290, 635796814, 751404004,
		 643250868, 477638056, 161913284, 207762017, 840788275,
		 686140665, 126455912, 921659610, 533519459, 117321188,
		 220197348, 535482633, 545626832, 594992734, 359019906,
		 411490650, 26011210,  24204707,  372574775, 949412420,
		 764024308, 944797721, 514189507, 301827199, 246337957,
		 646550461, 306344207, 208785190, 857387710, 499970600,
		 49847136,  848149578, 646487238, 391238893, 750126115,
		 640606915, 137876572, 742647647, 297025343, 145922751,
		 683308339, 413687995, 449566626, 811791614, 611025685,
		 34866419,  529847080, 672673098, 55818856,  283116209,
		 303341489, 134227645, 106200165, 140241076, 35182151,
		 186882441, 312093973, 1316815,	  95346744,  469925746,
		 744643003, 473235283, 533456540, 852820133, 42115253,
		 101915886, 794302852, 89683812,  575286668, 871650282,
		 840333387, 276267568, 369370562, 783295704, 569119596,
		 93864812,  125876964, 928698809, 522715045, 709140016,
		 129491709, 404692261, 582120578, 912542361, 564233031,
		 924250512, 922115011, 390488056, 222731960, 392054999,
		 788539197, 856698342, 798664506, 27053523,  569511544,
		 238883907, 67867284,  917582787, 526810580, 823320057,
		 303060378, 497540940, 16740809,  628376262, 588238066,
		 649948121, 221735936, 831748807, 231140926, 780604437 };
	k = 136;
	EXPECT_EQ(std::vector<double>(
			  { 480475736.00000, 480475736.00000, 480475736.00000,
			    480475736.00000, 468694248.50000, 454079649.50000,
			    468694248.50000, 468694248.50000, 454079649.50000,
			    445960302.50000, 454079649.50000, 454079649.50000,
			    468694248.50000, 454079649.50000, 445960302.50000,
			    445960302.50000, 445960302.50000, 438260753.50000,
			    429145837.50000, 438260753.50000, 438260753.50000,
			    438260753.50000, 438260753.50000, 438260753.50000,
			    438260753.50000, 445960302.50000, 454079649.50000,
			    454079649.50000, 478345056.50000, 478345056.50000,
			    454079649.50000, 445960302.50000, 445960302.50000,
			    438260753.50000, 445960302.50000, 445960302.50000,
			    438260753.50000, 438260753.50000, 438260753.50000,
			    429145837.50000, 426914190.00000, 426914190.00000,
			    426914190.00000, 429145837.50000, 429145837.50000,
			    438260753.50000, 445960302.50000, 445960302.50000,
			    454079649.50000, 473804270.00000, 454079649.50000,
			    454079649.50000, 445960302.50000, 445960302.50000,
			    445960302.50000, 445960302.50000, 445960302.50000,
			    454079649.50000, 445960302.50000, 438260753.50000,
			    445960302.50000, 445960302.50000, 445960302.50000,
			    454079649.50000, 454079649.50000, 445960302.50000,
			    454079649.50000, 454079649.50000, 445960302.50000,
			    438976201.00000, 438976201.00000, 438976201.00000,
			    429145837.50000, 429145837.50000, 426914190.00000,
			    429145837.50000, 438976201.00000, 429145837.50000,
			    438976201.00000, 438976201.00000, 429145837.50000,
			    429145837.50000, 438976201.00000, 429145837.50000,
			    429145837.50000, 438976201.00000, 429145837.50000,
			    429145837.50000, 429145837.50000, 429145837.50000,
			    429145837.50000, 438976201.00000, 429145837.50000,
			    426914190.00000, 426914190.00000, 425227434.50000,
			    425227434.50000, 420577261.50000, 425227434.50000,
			    426914190.00000, 429045004.50000, 425227434.50000,
			    420577261.50000, 414686912.50000, 414686912.50000,
			    420577261.50000, 420577261.50000, 425227434.50000,
			    429045004.50000, 446380100.50000, 446380100.50000,
			    446380100.50000, 467418995.00000, 479739716.00000,
			    494242554.00000, 479739716.00000, 494242554.00000,
			    479739716.00000, 479739716.00000, 494242554.00000,
			    509540061.50000, 509540061.50000, 494242554.00000,
			    509540061.50000, 494242554.00000, 494242554.00000,
			    509540061.50000, 518382318.00000, 518382318.00000,
			    501422498.50000, 501422498.50000, 480340863.00000,
			    501422498.50000, 501422498.50000, 518382318.00000,
			    518382318.00000, 512200079.00000, 512200079.00000,
			    518382318.00000, 518382318.00000, 518382318.00000,
			    518382318.00000, 518382318.00000, 512200079.00000,
			    512200079.00000, 518382318.00000, 518382318.00000,
			    512200079.00000, 512200079.00000, 518382318.00000,
			    524321770.50000, 524321770.50000, 524321770.50000,
			    529771989.50000, 529771989.50000, 529771989.50000,
			    529771989.50000, 533010515.50000, 533010515.50000,
			    539444468.00000, 539444468.00000, 533010515.50000,
			    531837437.00000, 522659458.50000, 512200079.00000,
			    512200079.00000, 512200079.00000, 512200079.00000,
			    522659458.50000, 531837437.00000, 523464080.00000,
			    517524627.50000, 517524627.50000, 517524627.50000,
			    523464080.00000, 523464080.00000, 523464080.00000,
			    517524627.50000, 523464080.00000, 523464080.00000,
			    531837437.00000, 531837437.00000, 523464080.00000,
			    531837437.00000, 523464080.00000, 523464080.00000,
			    531837437.00000, 531837437.00000, 531837437.00000,
			    539444468.00000, 539444468.00000, 531837437.00000,
			    523464080.00000, 517524627.50000, 517524627.50000,
			    526702606.00000, 517524627.50000, 517524627.50000,
			    517524627.50000, 512200079.00000, 502420892.50000,
			    512200079.00000, 502420892.50000, 489459865.00000,
			    502420892.50000, 512200079.00000, 517524627.50000,
			    526702606.00000, 526702606.00000, 526702606.00000,
			    539444468.00000, 526702606.00000, 517524627.50000,
			    526702606.00000, 517524627.50000, 512200079.00000,
			    512200079.00000, 502420892.50000, 489459865.00000,
			    502420892.50000, 502420892.50000, 489459865.00000,
			    489459865.00000, 489459865.00000, 489459865.00000,
			    489459865.00000, 489459865.00000, 489459865.00000,
			    502420892.50000, 502420892.50000, 512200079.00000,
			    512200079.00000, 502420892.50000, 512200079.00000,
			    512200079.00000, 502420892.50000, 489459865.00000,
			    489459865.00000, 502420892.50000, 512200079.00000,
			    517524627.50000, 517524627.50000, 512200079.00000,
			    512200079.00000, 512200079.00000, 512200079.00000,
			    502420892.50000, 502420892.50000, 489459865.00000,
			    478232041.50000, 478232041.50000, 478232041.50000,
			    474631360.50000, 474631360.50000, 474631360.50000,
			    474631360.50000, 472319845.00000, 469880102.50000,
			    472319845.00000, 472319845.00000, 469880102.50000,
			    466304670.50000, 455942090.50000, 455942090.50000,
			    455942090.50000, 466304670.50000, 466304670.50000,
			    466304670.50000, 466304670.50000, 466304670.50000,
			    455942090.50000, 438338404.50000, 437645573.00000,
			    448259258.50000, 448259258.50000, 455942090.50000,
			    466304670.50000, 472191618.00000, 468945867.00000,
			    472191618.00000, 478232041.50000, 478232041.50000,
			    478232041.50000, 478232041.50000, 478232041.50000,
			    478232041.50000, 472191618.00000, 472191618.00000,
			    478232041.50000, 478232041.50000, 489173938.50000,
			    496875706.50000, 496875706.50000, 496875706.50000,
			    489173938.50000, 478232041.50000, 472191618.00000,
			    478232041.50000, 489173938.50000, 489173938.50000,
			    489173938.50000, 496875706.50000, 496875706.50000,
			    496875706.50000, 496875706.50000, 489173938.50000,
			    489173938.50000, 489173938.50000, 496875706.50000,
			    500088149.50000, 496875706.50000, 496875706.50000,
			    496875706.50000, 500088149.50000, 496875706.50000,
			    489173938.50000, 489173938.50000, 478232041.50000,
			    489173938.50000, 478232041.50000, 478232041.50000,
			    489173938.50000, 478232041.50000, 478232041.50000,
			    478232041.50000, 478232041.50000, 478232041.50000,
			    478232041.50000, 478232041.50000, 489173938.50000,
			    499802223.00000, 499802223.00000, 499802223.00000,
			    489173938.50000, 499802223.00000, 505823811.00000,
			    505823811.00000, 505823811.00000, 520525690.50000,
			    520525690.50000, 505823811.00000, 499802223.00000,
			    483133515.00000, 483133515.00000, 483133515.00000,
			    483133515.00000, 483133515.00000, 483133515.00000,
			    499802223.00000, 499802223.00000, 499802223.00000,
			    505823811.00000, 505823811.00000, 520525690.50000,
			    520525690.50000, 520525690.50000, 539002208.50000,
			    539002208.50000, 539002208.50000, 554974336.50000,
			    554974336.50000, 554974336.50000, 569643231.00000,
			    554974336.50000, 554974336.50000, 569643231.00000,
			    554974336.50000, 554974336.50000, 554974336.50000,
			    539002208.50000, 531775350.50000, 539002208.50000,
			    554974336.50000, 554974336.50000, 560254886.50000,
			    560254886.50000, 560254886.50000, 560254886.50000,
			    560254886.50000, 539002208.50000, 539002208.50000,
			    539002208.50000, 560254886.50000, 560254886.50000,
			    560254886.50000, 575136032.00000, 575136032.00000,
			    580219393.50000, 587279370.50000, 587279370.50000,
			    592176515.00000, 587279370.50000, 587279370.50000,
			    592176515.00000, 587279370.50000, 580219393.50000,
			    580219393.50000, 587279370.50000, 587279370.50000,
			    580219393.50000, 580219393.50000, 575136032.00000,
			    580219393.50000, 580219393.50000, 580219393.50000,
			    580219393.50000, 585558843.50000, 587747710.00000,
			    592176515.00000, 592176515.00000, 587747710.00000,
			    587747710.00000, 585558843.50000, 580219393.50000,
			    585558843.50000, 580219393.50000, 580219393.50000,
			    580219393.50000, 575136032.00000, 580219393.50000,
			    575136032.00000, 575136032.00000, 580219393.50000,
			    580219393.50000, 575136032.00000, 571296515.00000,
			    571296515.00000, 571296515.00000, 550043837.00000,
			    531775350.50000, 531775350.50000, 550043837.00000,
			    571296515.00000, 550043837.00000, 550043837.00000,
			    571508766.00000, 571508766.00000, 550043837.00000,
			    563611922.50000, 571508766.00000, 571508766.00000,
			    580219393.50000, 580219393.50000, 585558843.50000,
			    580219393.50000, 571508766.00000, 580219393.50000,
			    580219393.50000, 585558843.50000, 580219393.50000,
			    580219393.50000, 580219393.50000, 580219393.50000,
			    580219393.50000, 571508766.00000, 580219393.50000,
			    580219393.50000, 571508766.00000, 571508766.00000,
			    580219393.50000, 580219393.50000, 585558843.50000,
			    586974434.00000, 586974434.00000, 580687733.00000,
			    580687733.00000, 580687733.00000, 571508766.00000,
			    580687733.00000, 580687733.00000, 571508766.00000,
			    571508766.00000, 580687733.00000, 571508766.00000,
			    571508766.00000, 575794760.50000, 581134210.50000,
			    586974434.00000, 588694961.00000, 588694961.00000,
			    595923753.00000, 588694961.00000, 588694961.00000,
			    595923753.00000, 595923753.00000, 588694961.00000,
			    595923753.00000, 593134228.00000, 599589744.00000,
			    599589744.00000, 602792014.00000, 599589744.00000,
			    593134228.00000, 599589744.00000, 599589744.00000,
			    593134228.00000, 599589744.00000, 593134228.00000,
			    593134228.00000, 593134228.00000, 588694961.00000,
			    586974434.00000, 586974434.00000, 588694961.00000,
			    593134228.00000, 593134228.00000, 599589744.00000,
			    599589744.00000, 593134228.00000, 593134228.00000,
			    593134228.00000, 593134228.00000, 588694961.00000,
			    588694961.00000, 588694961.00000, 593134228.00000,
			    588694961.00000, 588694961.00000, 586974434.00000,
			    585634929.00000, 585634929.00000, 580741956.50000,
			    580741956.50000, 571955243.50000, 571955243.50000,
			    571955243.50000, 566232112.00000, 566232112.00000,
			    566232112.00000, 562174785.50000, 566232112.00000,
			    571955243.50000, 571955243.50000, 571955243.50000,
			    571955243.50000, 571955243.50000, 580741956.50000,
			    580741956.50000, 580741956.50000, 571955243.50000,
			    566232112.00000, 562174785.50000, 562174785.50000,
			    558495196.50000, 558495196.50000, 558495196.50000,
			    558495196.50000, 556006691.00000, 556006691.00000,
			    556006691.00000, 527174775.00000, 527174775.00000,
			    499596829.00000, 527174775.00000, 527174775.00000,
			    499596829.00000, 499596829.00000, 499596829.00000,
			    499596829.00000, 494813893.50000, 494813893.50000,
			    494813893.50000, 494813893.50000, 486901532.50000,
			    486901532.50000, 494813893.50000, 499596829.00000,
			    494813893.50000, 486901532.50000, 481188630.50000,
			    469213718.00000, 465824703.50000, 469213718.00000,
			    469213718.00000, 469213718.00000, 465824703.50000,
			    458648941.50000, 458648941.50000, 448620102.00000,
			    448620102.00000, 458648941.50000, 458648941.50000,
			    448620102.00000, 458648941.50000, 448620102.00000,
			    458648941.50000, 448620102.00000, 448620102.00000,
			    448620102.00000, 448620102.00000, 445233263.00000,
			    445233263.00000, 445233263.00000, 448620102.00000,
			    445233263.00000, 445233263.00000, 455364298.50000,
			    450472483.50000, 450472483.50000, 450472483.50000,
			    445233263.00000, 441655288.50000, 441655288.50000,
			    441655288.50000, 441655288.50000, 441655288.50000,
			    445233263.00000, 445233263.00000, 445233263.00000,
			    450472483.50000, 445233263.00000, 445233263.00000,
			    445233263.00000, 441655288.50000, 441655288.50000,
			    441655288.50000, 436432156.00000, 436432156.00000,
			    436432156.00000, 428074532.50000, 409667297.00000,
			    409667297.00000, 409667297.00000, 389833634.00000,
			    381596344.50000, 381596344.50000, 381596344.50000,
			    389833634.00000, 409667297.00000, 409667297.00000,
			    409667297.00000, 409667297.00000, 409667297.00000,
			    428074532.50000, 416254066.50000, 428074532.50000,
			    428074532.50000, 428074532.50000, 428074532.50000,
			    416254066.50000, 404457100.50000, 404457100.50000,
			    404457100.50000, 416254066.50000, 416254066.50000,
			    416254066.50000, 416254066.50000, 416254066.50000,
			    416254066.50000, 416254066.50000, 428074532.50000,
			    428074532.50000, 428074532.50000, 419139011.00000,
			    419139011.00000, 419139011.00000, 428074532.50000,
			    428074532.50000, 428074532.50000, 436432156.00000,
			    428074532.50000, 428074532.50000, 428074532.50000,
			    428074532.50000, 428074532.50000, 428074532.50000,
			    419139011.00000, 419139011.00000, 419139011.00000,
			    413928814.50000, 419139011.00000, 419139011.00000,
			    419139011.00000, 428074532.50000, 428074532.50000,
			    428074532.50000, 437287161.00000, 437287161.00000,
			    437287161.00000, 428074532.50000, 419139011.00000,
			    413928814.50000, 413928814.50000, 419139011.00000,
			    428074532.50000, 437287161.00000, 437287161.00000,
			    437287161.00000, 442510293.50000, 442510293.50000,
			    446198151.50000, 446198151.50000, 446198151.50000,
			    446198151.50000, 442510293.50000, 446198151.50000,
			    451437372.00000, 463158710.00000, 463158710.00000,
			    463158710.00000, 480768425.50000, 480768425.50000,
			    463158710.00000, 463158710.00000, 463158710.00000,
			    480768425.50000, 480768425.50000, 498692220.00000,
			    498692220.00000, 498692220.00000, 498692220.00000,
			    498692220.00000, 498692220.00000, 480768425.50000,
			    498692220.00000, 480768425.50000, 480768425.50000,
			    463158710.00000, 463158710.00000, 463158710.00000,
			    480768425.50000, 480768425.50000, 480768425.50000,
			    480768425.50000, 463158710.00000, 480768425.50000,
			    480768425.50000, 463158710.00000, 463158710.00000,
			    451437372.00000, 451437372.00000, 451437372.00000,
			    451437372.00000, 443577378.00000, 438154117.00000,
			    438154117.00000, 438154117.00000, 438154117.00000,
			    426616236.50000, 438154117.00000, 426616236.50000,
			    438154117.00000, 426616236.50000, 413928814.50000,
			    413928814.50000, 404304004.00000, 404304004.00000,
			    395038889.50000, 395038889.50000, 404304004.00000,
			    395038889.50000, 395038889.50000, 404304004.00000,
			    413928814.50000, 413928814.50000, 426616236.50000,
			    438154117.00000, 438154117.00000, 426616236.50000,
			    453563313.00000, 474172984.00000, 457028385.00000,
			    457028385.00000, 457028385.00000, 426616236.50000,
			    413928814.50000, 413928814.50000, 413928814.50000,
			    413928814.50000, 404304004.00000, 404527394.00000,
			    395038889.50000, 395038889.50000, 395038889.50000,
			    404527394.00000, 414152204.50000, 426616236.50000,
			    426616236.50000, 414152204.50000, 404527394.00000,
			    414152204.50000, 414152204.50000, 404527394.00000,
			    404527394.00000, 414152204.50000, 404527394.00000,
			    404527394.00000, 404527394.00000, 394401515.50000,
			    394401515.50000, 404527394.00000, 404527394.00000,
			    404527394.00000, 404527394.00000, 394401515.50000,
			    394401515.50000, 404527394.00000, 404527394.00000,
			    404527394.00000, 404527394.00000, 404527394.00000,
			    412589322.50000, 425053354.50000, 412589322.50000,
			    412589322.50000, 412589322.50000, 404527394.00000,
			    404527394.00000, 394401515.50000, 389841108.00000,
			    385455239.00000, 383123684.00000, 376395417.00000,
			    376395417.00000, 376395417.00000, 383123684.00000,
			    389841108.00000, 394401515.50000, 404527394.00000,
			    394401515.50000, 389841108.00000, 389841108.00000,
			    389841108.00000, 394401515.50000, 394401515.50000,
			    394401515.50000, 389841108.00000, 389841108.00000,
			    394401515.50000, 394401515.50000, 394401515.50000,
			    389841108.00000, 389841108.00000, 389841108.00000,
			    394401515.50000, 394401515.50000, 394401515.50000,
			    394401515.50000, 401128199.50000, 408091455.50000,
			    412589322.50000, 412589322.50000, 412589322.50000,
			    408091455.50000, 401128199.50000, 408091455.50000,
			    408091455.50000, 412589322.50000, 408091455.50000,
			    412589322.50000, 408091455.50000, 408091455.50000,
			    408091455.50000, 412589322.50000, 431627310.50000,
			    412589322.50000, 412589322.50000, 408091455.50000,
			    412589322.50000, 431627310.50000, 459746186.00000,
			    431627310.50000, 459746186.00000, 459746186.00000,
			    471580514.50000 }),
		  solution.medianSlidingWindow(nums, k));
}

TEST(Leetcode, 2034_Stock_Price_Fluctuation)
{
	StockPrice stockprice;
	stockprice.update(38, 2308);
	EXPECT_EQ(2308, stockprice.maximum());
	EXPECT_EQ(2308, stockprice.current());
	EXPECT_EQ(2308, stockprice.minimum());

	EXPECT_EQ(2308, stockprice.maximum());
	EXPECT_EQ(2308, stockprice.maximum());
	EXPECT_EQ(2308, stockprice.maximum());
	EXPECT_EQ(2308, stockprice.minimum());
	EXPECT_EQ(2308, stockprice.minimum());

	EXPECT_EQ(2308, stockprice.maximum());
	stockprice.update(47, 7876);
	EXPECT_EQ(7876, stockprice.maximum());
	EXPECT_EQ(2308, stockprice.minimum());
	stockprice.update(58, 1866);

	EXPECT_EQ(7876, stockprice.maximum());
	EXPECT_EQ(1866, stockprice.minimum());
	EXPECT_EQ(1866, stockprice.current());
	EXPECT_EQ(7876, stockprice.maximum());
	stockprice.update(43, 121);

	EXPECT_EQ(121, stockprice.minimum());
	EXPECT_EQ(7876, stockprice.maximum());
	stockprice.update(40, 5339);
	EXPECT_EQ(7876, stockprice.maximum());
	EXPECT_EQ(7876, stockprice.maximum());

	EXPECT_EQ(1866, stockprice.current());
	stockprice.update(32, 5339);
	EXPECT_EQ(1866, stockprice.current());
	EXPECT_EQ(121, stockprice.minimum());
	stockprice.update(43, 6414);

	stockprice.update(49, 9369);
	EXPECT_EQ(1866, stockprice.minimum());
	EXPECT_EQ(1866, stockprice.minimum());
	stockprice.update(36, 3192);
	EXPECT_EQ(1866, stockprice.current());

	stockprice.update(48, 1006);
	EXPECT_EQ(9369, stockprice.maximum());
	stockprice.update(53, 8013);
	EXPECT_EQ(1006, stockprice.minimum());
}

TEST(Leetcode, 2035_Partition_Array_Into_Two_Arrays_to_Minimize_Sum_Difference)
{
	std::vector<int> nums{ 3, 9, 7, 3 };
	EXPECT_EQ(2, solution.minimumDifference(nums));
	nums = { -36, 36 };
	EXPECT_EQ(72, solution.minimumDifference(nums));
	nums = { 2, -1, 0, 4, -2, -9 };
	EXPECT_EQ(0, solution.minimumDifference(nums));
}

TEST(Leetcode, 1044_Longest_Duplicate_Substring)
{
	std::string s = "banana";
	EXPECT_EQ("ana", solution.longestDupSubstring(s));
	s = "abcd";
	EXPECT_EQ("", solution.longestDupSubstring(s));
}

TEST(Leetcode, 146_LRU_Cache)
{
	{
		LRUCache lRUCache(2);
		lRUCache.put(1, 1);
		lRUCache.put(2, 2);
		EXPECT_EQ(1, lRUCache.get(1));
		lRUCache.put(3, 3);
		EXPECT_EQ(-1, lRUCache.get(2));
		lRUCache.put(4, 4);
		EXPECT_EQ(-1, lRUCache.get(1));
		EXPECT_EQ(3, lRUCache.get(3));
		EXPECT_EQ(4, lRUCache.get(4));
	}
	{
		LRUCache lRUCache(2);
		lRUCache.put(2, 1);
		lRUCache.put(1, 1);
		EXPECT_EQ(1, lRUCache.get(2));
		lRUCache.put(4, 1);
		EXPECT_EQ(-1, lRUCache.get(1));
		EXPECT_EQ(1, lRUCache.get(2));
	}
}

TEST(Leetcode, 4_Median_of_Two_Sorted_Arrays)
{
	std::vector<int> nums1{ 1, 3 }, nums2{ 2 };
	EXPECT_EQ(2.0, solution.findMedianSortedArrays(nums1, nums2));
	nums1 = { 1, 2 }, nums2 = { 3, 4 };
	EXPECT_EQ(2.5, solution.findMedianSortedArrays(nums1, nums2));
	nums1 = { 0, 0 }, nums2 = { 0, 0 };
	EXPECT_EQ(0.0, solution.findMedianSortedArrays(nums1, nums2));
	nums1 = {}, nums2 = { 1 };
	EXPECT_EQ(1.0, solution.findMedianSortedArrays(nums1, nums2));
	nums1 = { 2 }, nums2 = {};
	EXPECT_EQ(2.0, solution.findMedianSortedArrays(nums1, nums2));
	nums1 = { 1, 2, 3 }, nums2 = { 2, 4, 6 };
	EXPECT_EQ(2.5, solution.findMedianSortedArrays(nums1, nums2));
	nums1 = {}, nums2 = { 2, 3 };
	EXPECT_EQ(2.5, solution.findMedianSortedArrays(nums1, nums2));
	nums1 = { 3 }, nums2 = { -2, -1 };
	EXPECT_EQ(-1.0, solution.findMedianSortedArrays(nums1, nums2));
}

TEST(Leetcode, 355_Design_Twitter)
{
	Twitter twitter;
	twitter.postTweet(1, 5);
	twitter.postTweet(1, 3);
	twitter.postTweet(1, 101);
	twitter.postTweet(1, 13);
	twitter.postTweet(1, 10);
	twitter.postTweet(1, 2);
	twitter.postTweet(1, 94);
	twitter.postTweet(1, 505);
	twitter.postTweet(1, 333);
	twitter.postTweet(1, 22);
	twitter.postTweet(1, 11);
	std::vector<int> excepted{ 11, 22, 333, 505, 94, 2, 10, 13, 101, 3 };
	EXPECT_EQ(excepted, twitter.getNewsFeed(1));
}

TEST(Leetcode, 451_Sort_Characters_By_Frequency)
{
	std::string s = "tree";
	EXPECT_EQ("eert", solution.frequencySort(s));
}

TEST(Leetcode, 154_Find_Minimum_in_Rotated_Sorted_Array_II)
{
	std::vector<int> nums{ 4, 5, 6, 7, 0, 1, 4 };
	EXPECT_EQ(0, solution.findMin(nums));
	nums = { 10, 1, 10, 10, 10 };
	EXPECT_EQ(1, solution.findMin(nums));
	nums = { 1, 1 };
	EXPECT_EQ(1, solution.findMin(nums));
}

TEST(Leetcode, DISABLED_492_Construct_the_Rectangle)
{
	int area = 4;
	std::vector<int> excepted{ 2, 2 };
	EXPECT_EQ(excepted, solution.constructRectangle(area));
	area = 37;
	excepted = { 37, 1 };
	EXPECT_EQ(excepted, solution.constructRectangle(area));
	area = 122122;
	excepted = { 427, 286 };
	EXPECT_EQ(excepted, solution.constructRectangle(area));
}

TEST(Leetcode, 222_Count_Complete_Tree_Nodes)
{
	TreeBuilder tree_builder;

	std::vector<std::optional<int> > data = { 1, 2, 3, 4, 5, 6 };
	auto root = tree_builder.buildFromLevelOrder(data);
	int output = 6;
	EXPECT_EQ(output, solution.countNodes(root));
	tree_builder.destoryTree(root);

	data = {};
	root = tree_builder.buildFromLevelOrder(data);
	output = 0;
	EXPECT_EQ(output, solution.countNodes(root));
	tree_builder.destoryTree(root);

	data = { 1 };
	root = tree_builder.buildFromLevelOrder(data);
	output = 1;
	EXPECT_EQ(output, solution.countNodes(root));
	tree_builder.destoryTree(root);
}

TEST(Leetcode, 1246_Palindrome_Removal)
{
	std::vector<int> arr{ 1, 2 };
	int output = 2;
	EXPECT_EQ(output, solution.minimumMoves(arr));

	arr = { 1, 3, 4, 1, 5 };
	output = 3;
	EXPECT_EQ(output, solution.minimumMoves(arr));
}

TEST(Leetcode, 980_Unique_Paths_III)
{
	std::vector<std::vector<int> > grid{ { 1, 0, 0, 0 },
					     { 0, 0, 0, 0 },
					     { 0, 0, 2, -1 } };
	EXPECT_EQ(2, solution.uniquePathsIII(grid));

	grid = { { 1, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 2 } };
	EXPECT_EQ(4, solution.uniquePathsIII(grid));

	grid = { { 0, 1 }, { 1, 0 } };
	EXPECT_EQ(0, solution.uniquePathsIII(grid));
}

TEST(Leetcode, 41_First_Missing_Positive)
{
	std::vector<int> nums{ 1, 2, 0 };
	EXPECT_EQ(3, solution.firstMissingPositive(nums));

	nums = { 3, 4, -1, 1 };
	EXPECT_EQ(2, solution.firstMissingPositive(nums));

	nums = { 7, 8, 9, 11, 12 };
	EXPECT_EQ(1, solution.firstMissingPositive(nums));

	nums = { 1 };
	EXPECT_EQ(2, solution.firstMissingPositive(nums));

	nums = { 1, 1 };
	EXPECT_EQ(2, solution.firstMissingPositive(nums));

	nums = { 2, 1 };
	EXPECT_EQ(3, solution.firstMissingPositive(nums));
}

TEST(Leetcode, 797_All_Paths_From_Source_to_Target)
{
	std::vector<std::vector<int> > graph{ { 1, 2 }, { 3 }, { 3 }, {} };
	std::vector<std::vector<int> > output{ { 0, 1, 3 }, { 0, 2, 3 } };
	EXPECT_EQ(output, solution.allPathsSourceTarget(graph));

	graph = { { 4, 3, 1 }, { 3, 2, 4 }, { 3 }, { 4 }, {} };
	output = { { 0, 4 },
		   { 0, 3, 4 },
		   { 0, 1, 3, 4 },
		   { 0, 1, 2, 3, 4 },
		   { 0, 1, 4 } };
	EXPECT_EQ(output, solution.allPathsSourceTarget(graph));

	graph = { { 1 }, {} };
	output = { { 0, 1 } };
	EXPECT_EQ(output, solution.allPathsSourceTarget(graph));

	graph = { { 1, 2, 3 }, { 2 }, { 3 }, {} };
	output = { { 0, 1, 2, 3 }, { 0, 2, 3 }, { 0, 3 } };
	EXPECT_EQ(output, solution.allPathsSourceTarget(graph));

	graph = { { 1, 3 }, { 2 }, { 3 }, {} };
	output = { { 0, 1, 2, 3 }, { 0, 3 } };
	EXPECT_EQ(output, solution.allPathsSourceTarget(graph));
}

TEST(Leetcode, 721_Accounts_Merge)
{
	std::vector<std::vector<std::string> > accounts{
		{ "John", "johnsmith@mail.com", "john_newyork@mail.com" },
		{ "John", "johnsmith@mail.com", "john00@mail.com" },
		{ "Mary", "mary@mail.com" },
		{ "John", "johnnybravo@mail.com" }
	};
	std::vector<std::vector<std::string> > output{
		{ "John", "john00@mail.com", "john_newyork@mail.com",
		  "johnsmith@mail.com" },
		{ "Mary", "mary@mail.com" },
		{ "John", "johnnybravo@mail.com" }
	};
	EXPECT_EQ(output, solution.accountsMerge(accounts));

	accounts = { { "Gabe", "Gabe0@m.co", "Gabe3@m.co", "Gabe1@m.co" },
		     { "Kevin", "Kevin3@m.co", "Kevin5@m.co", "Kevin0@m.co" },
		     { "Ethan", "Ethan5@m.co", "Ethan4@m.co", "Ethan0@m.co" },
		     { "Hanzo", "Hanzo3@m.co", "Hanzo1@m.co", "Hanzo0@m.co" },
		     { "Fern", "Fern5@m.co", "Fern1@m.co", "Fern0@m.co" } };
	output = { { "Ethan", "Ethan0@m.co", "Ethan4@m.co", "Ethan5@m.co" },
		   { "Gabe", "Gabe0@m.co", "Gabe1@m.co", "Gabe3@m.co" },
		   { "Hanzo", "Hanzo0@m.co", "Hanzo1@m.co", "Hanzo3@m.co" },
		   { "Kevin", "Kevin0@m.co", "Kevin3@m.co", "Kevin5@m.co" },
		   { "Fern", "Fern0@m.co", "Fern1@m.co", "Fern5@m.co" } };
	EXPECT_EQ(output, solution.accountsMerge(accounts));
}

TEST(Leetcode, 1306_Jump_Game_III)
{
	std::vector<int> arr{ 4, 2, 3, 0, 3, 1, 2 };
	int start{ 5 };
	EXPECT_TRUE(solution.canReach(arr, start));

	arr = { 4, 2, 3, 0, 3, 1, 2 }, start = 0;
	EXPECT_TRUE(solution.canReach(arr, start));

	arr = { 3, 0, 2, 1, 2 }, start = 2;
	EXPECT_FALSE(solution.canReach(arr, start));
}

TEST(Leetcode, 878_Nth_Magical_Number)
{
	int n = 1, a = 2, b = 3;
	EXPECT_EQ(2, solution.nthMagicalNumber(n, a, b));
	n = 4, a = 2, b = 3;
	EXPECT_EQ(6, solution.nthMagicalNumber(n, a, b));
	n = 5, a = 2, b = 4;
	EXPECT_EQ(10, solution.nthMagicalNumber(n, a, b));
	n = 3, a = 6, b = 4;
	EXPECT_EQ(8, solution.nthMagicalNumber(n, a, b));
}

TEST(Leetcode, 210_Course_Schedule_II)
{
	int numCourses = 2;
	std::vector<std::vector<int> > prerequisites{ { 1, 0 } };
	std::vector<int> output{ 0, 1 };
	EXPECT_EQ(output, solution.findOrder(numCourses, prerequisites));

	numCourses = 4,
	prerequisites = { { 1, 0 }, { 2, 0 }, { 3, 1 }, { 3, 2 } };
	output = { 0, 2, 1, 3 };
	output = { 0, 1, 2, 3 };
	EXPECT_EQ(output, solution.findOrder(numCourses, prerequisites));

	numCourses = 1, prerequisites = {};
	output = { 0 };
	EXPECT_EQ(output, solution.findOrder(numCourses, prerequisites));

	numCourses = 3, prerequisites = { { 0, 1 }, { 0, 2 }, { 1, 2 } };
	output = { 2, 1, 0 };
	EXPECT_EQ(output, solution.findOrder(numCourses, prerequisites));

	numCourses = 3, prerequisites = { { 1, 0 }, { 1, 2 }, { 0, 1 } };
	output = {};
	EXPECT_EQ(output, solution.findOrder(numCourses, prerequisites));
}

TEST(Leetcode, 1871_Jump_Game_VII)
{
	std::string s = "011010";
	int minJump = 2;
	int maxJump = 3;
	EXPECT_TRUE(solution.canReach(s, minJump, maxJump));

	s = "01101110";
	minJump = 2;
	maxJump = 3;
	EXPECT_FALSE(solution.canReach(s, minJump, maxJump));

	s = "01";
	minJump = 1;
	maxJump = 1;
	EXPECT_FALSE(solution.canReach(s, minJump, maxJump));

	s = "00111010";
	minJump = 3;
	maxJump = 5;
	EXPECT_FALSE(solution.canReach(s, minJump, maxJump));

	s = "0000000000";
	minJump = 2;
	maxJump = 5;
	EXPECT_TRUE(solution.canReach(s, minJump, maxJump));
}

TEST(Leetcode, 2151_Maximum_Good_People_Based_on_Statements)
{
	std::vector<std::vector<int> > statements{ { 2, 1, 2 },
						   { 1, 2, 2 },
						   { 2, 0, 2 } };
	EXPECT_EQ(2, solution.maximumGood(statements));

	statements = { { 2, 0 }, { 0, 2 } };
	EXPECT_EQ(1, solution.maximumGood(statements));
}

TEST(Leetcode, 211_Design_Add_and_Search_Words_Data_Structure)
{
	WordDictionary wordDictionary;
	wordDictionary.addWord("bad");
	wordDictionary.addWord("dad");
	wordDictionary.addWord("mad");
	EXPECT_FALSE(wordDictionary.search("pad")); // return False
	EXPECT_TRUE(wordDictionary.search("bad")); // return True
	EXPECT_TRUE(wordDictionary.search(".ad")); // return True
	EXPECT_TRUE(wordDictionary.search("b..")); // return True
}

TEST(Leetcode, 475_Heaters)
{
	std::vector<int> houses{ 1, 2, 3 }, heaters{ 2 };
	EXPECT_EQ(1, solution.findRadius(houses, heaters));

	houses = { 1, 2, 3, 4 }, heaters = { 1, 4 };
	EXPECT_EQ(1, solution.findRadius(houses, heaters));

	houses = { 1, 5 }, heaters = { 2 };
	EXPECT_EQ(3, solution.findRadius(houses, heaters));
}

TEST(Leetcode, 84_Largest_Rectangle_in_Histogram)
{
	std::vector<int> heights{ 2, 1, 5, 6, 2, 3 };
	EXPECT_EQ(10, solution.largestRectangleArea(heights));
	heights = { 2, 4 };
	EXPECT_EQ(10, solution.largestRectangleArea(heights));
}

TEST(Leetcode, 662_Maximum_Width_of_Binary_Tree)
{
	TreeBuilder tree_builder;

	std::vector<std::optional<int> > data = {
		1, 3, 2, 5, 3, std::nullopt, 9
	};
	auto root = tree_builder.buildFromLevelOrder(data);
	int output = 4;
	EXPECT_EQ(output, solution.widthOfBinaryTree(root));
	tree_builder.destoryTree(root);

	data = { 1, 3, std::nullopt, 5, 3 };
	root = tree_builder.buildFromLevelOrder(data);
	output = 2;
	EXPECT_EQ(output, solution.widthOfBinaryTree(root));
	tree_builder.destoryTree(root);

	data = { 1, 3, 2, 5 };
	root = tree_builder.buildFromLevelOrder(data);
	output = 2;
	EXPECT_EQ(output, solution.widthOfBinaryTree(root));
	tree_builder.destoryTree(root);
}

TEST(Leetcode, 228_Summary_Ranges)
{
	std::vector<int> nums{ 0, 1, 2, 4, 5, 7 };
	std::vector<std::string> output{ "0->2", "4->5", "7" };
	EXPECT_EQ(output, solution.summaryRanges(nums));

	nums = { 0, 2, 3, 4, 6, 8, 9 };
	output = { "0", "2->4", "6", "8->9" };
	EXPECT_EQ(output, solution.summaryRanges(nums));
}

TEST(Leetcode, 1387_Sort_Integers_by_The_Power_Value)
{
	int lo = 12, hi = 15, k = 2;
	EXPECT_EQ(13, solution.getKth(lo, hi, k));

	lo = 7, hi = 11, k = 4;
	EXPECT_EQ(7, solution.getKth(lo, hi, k));
}

TEST(Leetcode, 1249_Minimum_Remove_to_Make_Valid_Parentheses)
{
	std::string s = "lee(t(c)o)de)";
	EXPECT_EQ("lee(t(c)o)de", solution.minRemoveToMakeValid(s));

	s = "a)b(c)d";
	EXPECT_EQ("ab(c)d", solution.minRemoveToMakeValid(s));

	s = "))((";
	EXPECT_EQ("", solution.minRemoveToMakeValid(s));

	s = ")))t((u)";
	EXPECT_EQ("t(u)", solution.minRemoveToMakeValid(s));
}

TEST(Leetcode, 1007_Minimum_Domino_Rotations_For_Equal_Row)
{
	std::vector<int> tops{ 2, 1, 2, 4, 2, 2 }, bottoms{ 5, 2, 6, 2, 3, 2 };
	EXPECT_EQ(2, solution.minDominoRotations(tops, bottoms));

	tops = { 3, 5, 1, 2, 3 }, bottoms = { 3, 6, 3, 3, 4 };
	EXPECT_EQ(-1, solution.minDominoRotations(tops, bottoms));
}

TEST(Leetcode, 1606_Find_Servers_That_Handled_Most_Number_of_Requests)
{
	int k = 3;
	std::vector<int> arrival{ 1, 2, 3, 4, 5 }, load{ 5, 2, 3, 3, 3 };
	std::vector<int> output{ 1 };
	EXPECT_EQ(output, solution.busiestServers(k, arrival, load));

	k = 3, arrival = { 1, 2, 3, 4 }, load = { 1, 2, 1, 2 };
	output = { 0 };
	EXPECT_EQ(output, solution.busiestServers(k, arrival, load));

	k = 3, arrival = { 1, 2, 3 }, load = { 10, 12, 11 };
	output = { 0, 1, 2 };
	EXPECT_EQ(output, solution.busiestServers(k, arrival, load));

	k = 2, arrival = { 1, 2, 3 }, load = { 1000000000, 1, 1000000000 };
	output = { 1 };
	EXPECT_EQ(output, solution.busiestServers(k, arrival, load));

	k = 7,
	arrival = { 1, 3, 4, 5, 6, 11, 12, 13, 15, 19, 20, 21, 23, 25, 31, 32 },
	load = { 9, 16, 14, 1, 5, 15, 6, 10, 1, 1, 7, 5, 11, 4, 4, 6 };
	output = { 0 };
	EXPECT_EQ(output, solution.busiestServers(k, arrival, load));
}

TEST(Leetcode, 1461_Check_If_a_String_Contains_All_Binary_Codes_of_Size_K)
{
	std::string s = "00110110";
	int k = 2;
	EXPECT_EQ(true, solution.hasAllCodes(s, k));

	s = "0110", k = 1;
	EXPECT_EQ(true, solution.hasAllCodes(s, k));

	s = "0110", k = 2;
	EXPECT_EQ(false, solution.hasAllCodes(s, k));

	s = "01100", k = 2;
	EXPECT_EQ(true, solution.hasAllCodes(s, k));
}

TEST(Leetcode, 2250_Count_Number_of_Rectangles_Containing_Each_Point)
{
	std::vector<std::vector<int> > rectangles{ { 1, 2 },
						   { 2, 3 },
						   { 2, 5 } },
		points{ { 2, 1 }, { 1, 4 } };
	std::vector<int> output{ 2, 1 };
	EXPECT_EQ(output, solution.countRectangles(rectangles, points));

	rectangles = { { 1, 1 }, { 2, 2 }, { 3, 3 } },
	points = { { 1, 3 }, { 1, 1 } };
	output = { 1, 3 };
	EXPECT_EQ(output, solution.countRectangles(rectangles, points));
}

TEST(Leetcode, 829_Consecutive_Numbers_Sum)
{
	int n{ 5 };
	EXPECT_EQ(2, solution.consecutiveNumbersSum(n));
	n = 9;
	EXPECT_EQ(3, solution.consecutiveNumbersSum(n));
	n = 15;
	EXPECT_EQ(4, solution.consecutiveNumbersSum(n));
}

TEST(Leetcode, 2251_Number_of_Flowers_in_Full_Bloom)
{
	std::vector<std::vector<int> > flowers{
		{ 1, 6 }, { 3, 7 }, { 9, 12 }, { 4, 13 }
	};
	std::vector<int> persons{ 2, 3, 7, 11 };
	std::vector<int> output{ 1, 2, 2, 2 };
	EXPECT_EQ(output, solution.fullBloomFlowers(flowers, persons));

	flowers = { { 1, 10 }, { 3, 3 } }, persons = { 3, 3, 2 },
	output = { 2, 2, 1 };
	EXPECT_EQ(output, solution.fullBloomFlowers(flowers, persons));
}

TEST(Leetcode, 3411_maximum_subarray_with_equal_products)
{
	std::vector<int> nums{ 1, 2, 1, 2, 1, 1, 1 };
	EXPECT_EQ(5, solution.maxLength(nums));
	nums = { 2, 3, 4, 5, 6 };
	EXPECT_EQ(3, solution.maxLength(nums));
	nums = { 1, 2, 3, 1, 4, 5, 1 };
	EXPECT_EQ(5, solution.maxLength(nums));
	nums = { 2, 6 };
	EXPECT_EQ(2, solution.maxLength(nums));
}

TEST(Leetcode, 2349_design_a_number_container_system)
{
	{
		NumberContainers nc;
		EXPECT_EQ(
			-1,
			nc.find(10)); // There is no index that is filled with number 10. Therefore, we return -1.
		nc.change(
			2,
			10); // Your container at index 2 will be filled with number 10.
		nc.change(
			1,
			10); // Your container at index 1 will be filled with number 10.
		nc.change(
			3,
			10); // Your container at index 3 will be filled with number 10.
		nc.change(
			5,
			10); // Your container at index 5 will be filled with number 10.
		EXPECT_EQ(
			1,
			nc.find(10)); // Number 10 is at the indices 1, 2, 3, and 5. Since the smallest index that is filled with 10 is 1, we return 1.
		nc.change(
			1,
			20); // Your container at index 1 will be filled with number 20. Note that index 1 was filled with 10 and then replaced with 20.
		EXPECT_EQ(
			2,
			nc.find(10)); // Number 10 is at the indices 2, 3, and 5. The smallest index that is filled with 10 is 2. Therefore, we return 2.
	}
	{
		NumberContainers nc;
		nc.change(1, 10);
		EXPECT_EQ(1, nc.find(10));
		nc.change(1, 20);
		EXPECT_EQ(-1, nc.find(10));
		EXPECT_EQ(1, nc.find(20));
		EXPECT_EQ(-1, nc.find(30));
	}
}

TEST(Leetcode, 1993_operations_on_tree)
{
	std::vector<int> parent{ -1, 0, 0, 1, 1, 2, 2 };
	LockingTree lockingTree(parent);
	EXPECT_TRUE(lockingTree.lock(2, 2)); // return true because node 2 is unlocked.
		// Node 2 will now be locked by user 2.
	EXPECT_FALSE(lockingTree.unlock(
		2,
		3)); // return false because user 3 cannot unlock a node locked by user 2.
	EXPECT_TRUE(lockingTree.unlock(
		2,
		2)); // return true because node 2 was previously locked by user 2.
	// Node 2 will now be unlocked.
	EXPECT_TRUE(lockingTree.lock(4, 5)); // return true because node 4 is unlocked.
		// Node 4 will now be locked by user 5.
	EXPECT_TRUE(lockingTree.upgrade(
		0,
		1)); // return true because node 0 is unlocked and has at least one locked descendant (node 4).
	// Node 0 will now be locked by user 1 and node 4 will now be unlocked.
	EXPECT_FALSE(lockingTree.lock(0,
			 1)); // return false because node 0 is already locked.
}

TEST(Leetcode, 1079_letter_tile_possibilities)
{
	std::string tiles{ "AAB" };
	EXPECT_EQ(8,solution.numTilePossibilities(tiles));
	tiles = "AAABBC";
	EXPECT_EQ(188, solution.numTilePossibilities(tiles));
	tiles = "V";
	EXPECT_EQ(1, solution.numTilePossibilities(tiles));
}

TEST(Leetcode, 3306_count_of_substrings_containing_every_vowel_and_k_consonants_ii)
{
	std::string s{ "aeioqq" };
	EXPECT_EQ(0, solution.countOfSubstrings(s, 1));
	s = "aeiou";
	EXPECT_EQ(1, solution.countOfSubstrings(s, 0));
	s = "ieaouqqieaouqq";
	EXPECT_EQ(3, solution.countOfSubstrings(s, 1));
}

TEST(Leetcode, 1358_Number_of_Substrings_Containing_All_Three_Characters){
	std::string s{ "abcabc" };
	EXPECT_EQ(10, solution.numberOfSubstrings(s));
	s = "aaacb";
	EXPECT_EQ(3, solution.numberOfSubstrings(s));
	s = "abc";
	EXPECT_EQ(1, solution.numberOfSubstrings(s));
}
